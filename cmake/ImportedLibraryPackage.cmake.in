
# Configuration for @CONFIG_NAME@::@CUR_BINARY_PLATFORM@::@ARTIFACT_ID@@CONFIG_LIB_NAMES_NAME@

if(NOT TARGET @CONFIG_NAME@::@CUR_BINARY_PLATFORM@::@ARTIFACT_ID@@CONFIG_LIB_NAMES_NAME@)
  find_library(
    LIB_@LIB_NAME@_@CUR_BINARY_PLATFORM@
    NAMES @LIB_NAME@ lib@LIB_NAME@ @LIB_NAME@.dll @LIB_NAME@.dylib
    PATHS "@VENDOR_DIRECTORY@/lib/@CUR_BASE_OS_PLATFORM@/@CUR_SHORT_BINARY_PLATFORM@/shared/"
    HINTS "@VENDOR_DIRECTORY@/lib/@CUR_BASE_OS_PLATFORM@/@CUR_SHORT_BINARY_PLATFORM@/shared/"
    NO_CMAKE_SYSTEM_PATH
  )

  if(${LIB_@LIB_NAME@_@CUR_BINARY_PLATFORM@} STREQUAL "LIB_@LIB_NAME@_@CUR_BINARY_PLATFORM@-NOTFOUND")
      if("@CUR_BINARY_PLATFORM@" STREQUAL "windowsx86-64")
        set(LIB_SPECIFIER ".dll")
      elseif("@CUR_BINARY_PLATFORM@" STREQUAL "osxuniversal")
        set(LIB_SPECIFIER ".dylib")
    elseif("@CUR_BINARY_PLATFORM@" STREQUAL "linuxx86-64" OR "@CUR_BINARY_PLATFORM@" STREQUAL "linuxathena")
        set(LIB_SPECIFIER ".so")
      endif()

      file(GLOB_RECURSE LIB_@LIB_NAME@_@CUR_BINARY_PLATFORM@ "@VENDOR_DIRECTORY@/lib/@CUR_BASE_OS_PLATFORM@/@CUR_SHORT_BINARY_PLATFORM@/shared/*@LIB_NAME@${LIB_SPECIFIER}*")
      unset(LIB_SPECIFIER)
  endif()
  if("${LIB_@LIB_NAME@_@CUR_BINARY_PLATFORM@}" STREQUAL "")
      set(LIB_@LIB_NAME@_@CUR_BINARY_PLATFORM@ "LIB_@LIB_NAME@_@CUR_BINARY_PLATFORM@-NOTFOUND")
  endif()

  add_library(@CONFIG_NAME@::@CUR_BINARY_PLATFORM@::@ARTIFACT_ID@@CONFIG_LIB_NAMES_NAME@ SHARED IMPORTED)

  set_target_properties(@CONFIG_NAME@::@CUR_BINARY_PLATFORM@::@ARTIFACT_ID@@CONFIG_LIB_NAMES_NAME@
    PROPERTIES
      INTERFACE_INCLUDE_DIRECTORIES "@VENDOR_DIRECTORY@/include"
      INTERFACE_LINK_DIRECTORIES "@VENDOR_DIRECTORY@/lib/@CUR_BASE_OS_PLATFORM@/@CUR_SHORT_BINARY_PLATFORM@/shared"
      IMPORTED_LOCATION ${LIB_@LIB_NAME@_@CUR_BINARY_PLATFORM@}
  )
endif()
